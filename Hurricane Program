// Program #1 – Hurricane Program
// Programmer:  Byung Rog Lee
// Class:  CS 2020, Spring 2024
// Due Date: January 28th, 2024
// Purpose of program: Create a program that
// will read data from a file called hurricanes.txt.  
// The data will consist of a city’s name, wind velocity
//and amount of rain for the hurricanes that occurred in the United States.

#include <iostream>
#include <vector>
#include <fstream>
#include <iomanip>
#include <string>
//global constants
const int MAXCITIES = 50;
using namespace std;
// Prototype (ADD MISSING PROTOTYPES)
void ReadData(vector<string>& city, vector<int>& wind, vector<double>& rain, int& numcities) {
    cout << left << fixed << setprecision(1);
    ifstream infile;
    string tempstr;
    numcities = 0;

    //Now we will open the file

    infile.open("hurricanes.txt");
    if (!infile)
    {
        cerr << "Error" << endl;
    }

    //We will now run a loop to get al of the data from the file and assign it to the proper vector
    while (!infile.eof() && numcities < MAXCITIES)
    {
        getline(infile, city.at(numcities));
        infile >> wind.at(numcities);
        infile >> rain.at(numcities);
        getline(infile, tempstr);
        numcities++;
    }
    infile.close();
}

void PrintVectors(vector<string>city, vector<int>wind, vector<double>rain, int numcities)
{
    cout << "The Data file consists of: " << endl;
    cout << setw(15) << "City" << setw(10) << "Wind" << setw(10) << "Rain" << endl;
    cout << setw(15) << "------" << setw(10) << "----" << setw(10) << "-----" << endl;

    for (int count = 0; count < numcities; count++)
    {
        cout << setw(15) << city.at(count) << setw(10);
        cout << wind.at(count) << setw(10);
        cout << rain.at(count) << endl;


    }
    cout << endl;
    cout << endl;
}


// Selection Sort
void SelSort(vector<string>& city, vector<int>& wind, vector<double>& rain, int numcities) {
    int i;
    int j;
    int indexSmallest;
    string tempCity;
    int tempWind;
    double tempRain;

    for (i = 0; i < numcities - 1; ++i) {
        indexSmallest = i;
        for (j = i + 1; j < numcities; ++j) {
            if (city.at(j) < city.at(indexSmallest)) {
                indexSmallest = j;
            }
        }

        tempCity = city.at(i);
        city.at(i) = city.at(indexSmallest);
        city.at(indexSmallest) = tempCity;

        tempWind = wind.at(i);
        wind.at(i) = wind.at(indexSmallest);
        wind.at(indexSmallest) = tempWind;

        tempRain = rain.at(i);
        rain.at(i) = rain.at(indexSmallest);
        rain.at(indexSmallest) = tempRain;

        
    }

}


int ViolentWinds(vector<string>city, vector<int>wind, int numcities)
{
    int i;
    cout << "Cities with violent winds" << endl;
    for (i = 0; i < numcities; ++i) {
        if (wind.at(i) >= 120) {
            cout << setw(15) << city.at(i) << wind.at(i) << endl;
        }
    }
    return 0;
}

double MajorFlood(vector<string>city, vector<double>rain, int numcities)
{
    int i;
    cout << "Cities with major floods" << endl;
    for (i = 0; i < numcities; ++i) {
        if (rain.at(i) >= 3.5) {
            cout << setw(15) << city.at(i) << rain.at(i) << endl;
        }
    }
    return 0;
}

int WindiestCity(vector<string>city, vector<int>wind, int numcities)
{
    int i;
    int maxsoFar;
    int saveIndex;
    for (i = 0; i < numcities; ++i) {
        if (i == 0) {
            maxsoFar = wind.at(i);
            saveIndex = i;
        }
        else if (wind.at(i) > maxsoFar) {
            maxsoFar = wind.at(i);
            saveIndex = i;
        }
    }

    cout << city.at(saveIndex) << " is the windiest city at 153 mph." << endl;

    return 0;
}




double AverWind(vector<string>city, vector<int>wind, int numcities)
{
    int i;
    double sum;
    double count;
    sum = 0;
    count = 0;
    for (i = 0; i < numcities; ++i) {
        sum += wind.at(i);
        count += 1;
    }
    cout << "The average wind is " << fixed << setprecision(1) << sum / count << endl;

    return 0;
}

double AverRain(vector<string>city, vector<double>rain, int numcities)
{
    int i;
    double sum;
    int count;
    sum = 0;
    count = 0;
    for (i = 0; i < numcities; ++i) {
        sum += rain.at(i);
        count += 1;
    }
    cout << "The average rain is " << fixed << setprecision(3) << sum / count << endl;

    return 0;
}

int main()
{
    // Declared variables and vectors
    int numcities;
    vector<string> city(MAXCITIES);
    vector<int> wind(MAXCITIES);
    vector<double> rain(MAXCITIES);


    // call to the ReadData Function
    ReadData(city, wind, rain, numcities);

    // Call the SelSort Function
    SelSort(city, wind, rain, numcities);

    // Call the PrintVectors Function
    PrintVectors(city, wind, rain, numcities);

    // Call the ViolentWinds Function
    ViolentWinds(city, wind, numcities);
    cout << endl;
    cout << endl;

    // Call the MajorFlood Function
    MajorFlood(city, rain, numcities);
    cout << endl;


    // output averages and highest
    WindiestCity(city, wind, numcities);
    cout << endl;
    AverWind(city, wind, numcities);
    AverRain(city, rain, numcities);


    system("Pause");
    return 0;
}
